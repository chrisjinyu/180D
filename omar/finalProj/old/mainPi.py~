#import speech_recognition as sr
import RPi.GPIO as GPIO
import numpy as np
import time
import board
import neopixel
import socket 

SLEEPTIME = 0.1  #time for dist to wait - maybe set to 0??
MEANWINDOWSIZE = 20  #size of running average window - relate to sleeptime

RED = 0 #red light output
GREEN = 1 # green light output
WARNING = 2 #warning for when getting close to moving too much
FAULT = 3 #when player has moved too much and must go back

TRIG1 = 4
TRIG2 = 2
ECHO = 3

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(TRIG1, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)
GPIO.setup(TRIG2, GPIO.OUT)

pixels = neopixel.NeoPixel(board.D18, 12)
player1dists = []
player1dists.append(0)
Dist1 = 0
player2dists = []
player2dists.append(0)
Dist2 = 0

def running_mean(x, N):
	cumsum = np.cumsum(np.insert(x, 0, 0))
	return (cumsum[N:] - cumsum[:-N]) / float(N)

def getDistHelper(trig, echo):
	GPIO.output(trig, False)
	time.sleep(SLEEPTIME)
	GPIO.output(trig, True)           #sending pulse that will bounce off object to be measured
	time.sleep(0.00001)
	GPIO.output(trig, False)

	while GPIO.input(echo)==0:        #timing how long sound wave takes to return
		pulse_start = time.time()
	while GPIO.input(echo)==1:
		pulse_end = time.time()

	pulse_duration = pulse_end - pulse_start
	distance = pulse_duration * 17150
	inchDist = distance/2.54
	return inchDist

def getDist():
	#currLen = len(dist1)
	currDist = getDistHelper(TRIG1, ECHO, "one")
	if(currDist < 20*12):
		player1dists.append(currDist)
	mean = running_mean(player1dists[currLen-MEANWINDOWSIZE:currLen], MEANWINDOWSIZE)
	if (len(mean) != 0): 
		Dist1 = mean
	currDist = getDistHelper(TRIG2, ECHO, "one")
	if(currDist < 20*12):
		player2dists.append(currDist)
	mean = running_mean(player2dists[currLen-MEANWINDOWSIZE:currLen], MEANWINDOWSIZE)
	if (len(mean) != 0): 
		Dist2 = mean

def changeLight(color): # maybe add winning/resetting sequence(s)
	#change the light to red or green
	if (color == 0):
		pixels.fill((255,0,0))
	elif (color == 1):
		pixels.fill((0,255,0))
	elif (color == 2): 
		print("not supported (yet?) \n")
	elif (color == 3):
		print("not supported (yet?) \n")
	else:
		print("invalid input to changeLight!\n")
		
	
	
if __name__ == "__main__": 
	#print "Executed when invoked directly"
	try:
		client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		client.connect(('', 808))
		client.send("I AM CLIENT\n".encode())
		from_server = client.recv(4096).decode()
		#print(from_server)
		while 1:
			getDist()
			dataToSend = str(Dist1) + ',' + str(Dist2)
			client.send(dataToSend.encode())
			
			
			dataRec = client.recv(4096).decode()
			if dataRec:  #server should send RED, GREEN, WARNING, FAULT, etc.
				changeLight(dataRec)
		
	except KeyboardInterrupt:
		print("\nCleaning up\n")
		pixels.fill((0,0,0))
		GPIO.cleanup()
		client.close()

	
#	changeLight(RED)
#	while 1:
		#change light red to green and back and measure dist of players
#		startPlayer1Dist = getDist(1)
#		startPlayer2Dist = getDist(2)



#else: 
	#print "Executed when imported"


